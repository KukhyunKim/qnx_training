/*
// 2nd priority & interrupt - 20200908

// 1st ipc
Server pseudo-code:
   • create a channel ( ChannelCreate() )
   • wait for a message ( MsgReceive() )
   – perform processing
   – reply ( MsgReply() )
Client pseudo-code:
   • attach to a channel ( ConnectAttach() )
   • send message ( MsgSend() )
*/

#include <stdio.h>
#include <sys/neutrino.h>
#include <pthread.h>
#include <process.h>
#include <sched.h>

int chid = -1;

#if 0
static void* ipc_server (void)
{
	int rc;
    struct _pulse msg;

	printf("-k ipc_server \n");

    chid = ChannelCreate (0);
    if ( chid == -1 ) {
        rc = errno ;
        goto out;
	}
	printf("-k ipc_server: ChannelCreate done. chid:%d\n", chid);

	rc = -1;
	while(rc < 0)
	{
		printf("-k ipc_server: wait msg...\n");
		rc = MsgReceive (chid, &msg, sizeof(struct _pulse), NULL);
		printf("-k ipc_server: MsgReceive rc:%d\n", rc);

		MsgReply (rc, EOK, &msg, sizeof(msg));
		printf("-k ipc_server: MsgReply\n");
	}

out:
	ChannelDestroy ( chid ) ;
	printf("-k ipc_server: ChannelDestroy\n");
    pthread_exit ( (void*)rc ) ;
}

static void* ipc_client (void)
{
	int rc, coid;
    struct _pulse snd_msg;
	int rev_msg;

	printf("-k ipc_client\n");

	while ( chid < 0 ) {
		printf("-k ipc_client: wating. chid not create!\n");
	}

    coid = ConnectAttach (0, 0, chid, _NTO_SIDE_CHANNEL, 0);
	if ( coid == -1 ) {
		printf("-k ipc_client: file ConnectAttach, coid:%d\n", coid);
        goto out;
	}
	printf("-k ipc_client: ConnectAttach, coid:%d\n", coid);

	rc = MsgSend (coid, &snd_msg, sizeof(snd_msg), &rev_msg, sizeof(rev_msg));
	printf("-k ipc_client: MsgSend\n");

out:
	ConnectDetach ( coid );
	printf("-k ipc_client: ConnectDetach\n");
    pthread_exit ( (void*)rc ) ;
}
#endif


int main ( int argc , char ** argv )
{
	int rc;
	int cnt=0;

    pid_t pid;
    pid_t get_pid;
    pid_t c_pid;
	struct sched_param param;

#if 0
	// thread
	printf("\t-k ipc_test thread!\n");
    pthread_t tid, tid1;
    pthread_create ( &tid, NULL , ipc_server, NULL);
    pthread_create ( &tid1, NULL , ipc_client, NULL);

    pthread_join (tid, (void*)&rc);
	printf("-k ipc_server: end.\n");
    pthread_join (tid1, (void*)&rc);
	printf("-k ipc_client: end.\n");
#else
	// fork
	printf("\n\tTOP: 2nd:priority & interrupt / 1st:ipc_test fork!\n\n");

	printf("-p ipc_server \n");

    chid = ChannelCreate (0);
    if ( chid == -1 ) {
        rc = errno ;
        goto out;
	}
	printf("-p ipc_server: ChannelCreate done. chid:%d\n", chid);

	get_pid = getpid();
	printf("-p get_pid:%d\n", get_pid);

	sched_getparam(get_pid, &param); //Get the current scheduling parameters of a process
	printf("The assigned priority is %d.\n", param.sched_priority);
	printf("The current priority is %d.\n", param.sched_curpriority);

	// fork
    if ( -1 == ( pid = fork () )) {
        printf("fork failed");
        rc = -1;
        goto out;
    }

    if ( pid == 0 ) { //child
		//ipc_client();
		int coid;
		struct _pulse snd_msg;
		int rev_msg;
		printf("-c ipc_client\n");

		c_pid = getpid();
		printf("-c c_pid:%d\n", c_pid);

		sched_getparam(c_pid, &param);
		printf("The assigned priority is %d.\n", param.sched_priority);
		printf("The current priority is %d.\n", param.sched_curpriority);

		while ( chid < 0 ) {
			printf("-c ipc_client: wating. chid not create!\n");
		}

		coid = ConnectAttach (0, get_pid, chid, _NTO_SIDE_CHANNEL, 0);
		if ( coid == -1 ) {
			printf("-c ipc_client: file ConnectAttach, chid:%d, coid:%d\n", chid, coid);
			goto out;
		}
		printf("-c ipc_client: ConnectAttach, coid:%d\n", coid);

		for(int i=0; i < 10; i++)
		{
			rc = MsgSend (coid, &snd_msg, sizeof(snd_msg), &rev_msg, sizeof(rev_msg));
			printf("-c ipc_client: MsgSend. i:%d\n", i);

			delay(500); //500ms
		}
	}
	else { //parent
		//ipc_server();
		struct _pulse msg;

		while(cnt < 10)
		{
			printf("-p ipc_server: wait msg...\n");
			rc = MsgReceive (chid, &msg, sizeof(struct _pulse), NULL);
			printf("-p ipc_server: MsgReceive. cnt:%d\n", cnt++);

			MsgReply (rc, EOK, &msg, sizeof(msg));
			printf("-p ipc_server: MsgReply\n");

			if(cnt == 5) {
				printf("Change priority -pid:%d\n", get_pid);
				param.sched_priority = 8;
				sched_setparam(get_pid, &param);
				//nice(-3);

				sched_getparam(get_pid, &param); //Get the current scheduling parameters of a process
				printf("The assigned priority is %d.\n", param.sched_priority);
				printf("The current priority is %d.\n", param.sched_curpriority);
			}
		}

		wait(); //Wait for the status of a terminated child process
		printf("-p ipc_server: wait for child to die. --done \n");
	}
#endif

	printf("\n\tinterrupt test\n\n");


	return 0;

out:
	printf("-k main out! rc:%d\n", rc);

	return -1;

}
